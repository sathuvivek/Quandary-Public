package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;

import ast.*;
import interpreter.Interpreter;

parser code {: 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }

:};

terminal PLUS, MINUS, TIMES, UMINUS, LPAREN, RPAREN, RETURN, SEMICOLON, INT, LCURLY, RCURLY, ASSIGN, IF, ELSE, PRINT,
         GE, LE, GT, LT, EQ, NE, AND, OR, NOT, COMMA, NIL, MUTABLE, DOT, REF, Q, WHILE ;
terminal Long    INTCONST;
terminal String IDENT;

non terminal Program        program;
non terminal FuncDefList    funcDefList;
non terminal FuncDef        funcDef;
non terminal VarDecl         varDecl;
non terminal Type            type;
non terminal FormalDeclList  formalDeclList;
non terminal FormalDeclList   neFormalDeclList;
non terminal ExprList       exprList;
non terminal ExprList       neExprList;
non terminal Stmt            stmt;
non terminal StmtList        stmtList;
non terminal Expr            expr;
non terminal BinaryExpr      binaryExpr;
non terminal Cond            cond;


precedence left OR;
precedence left AND;
precedence left NOT;
precedence left LE, GE, EQ, NE, LT, GT;
precedence left DOT;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

precedence left ELSE; //resolves dangling else
start with program;

program ::= funcDefList:fdl
            {: RESULT = new Program(fdl, loc(fdlleft, fdlright)); :}
            ;
funcDefList ::= funcDef:first funcDefList:rest
                {: RESULT = new FuncDefList(first, rest, loc(firstleft, firstright)); :}
            |
                {: RESULT = null; :}
            ;

funcDef ::= varDecl:funcName LPAREN formalDeclList:params RPAREN LCURLY stmtList:body RCURLY
                {: RESULT = new FuncDef(funcName, params, body, loc(funcNameleft, funcNameright)); :}
             ;
varDecl ::= type:t IDENT:varName
            {: RESULT = new VarDecl(t, false, varName, loc(tleft, tright)); :}
            | MUTABLE type:t IDENT:varName
                {: RESULT = new VarDecl(t, true, varName, loc(tleft, tright)); :}
            ;

type ::= INT
            {: RESULT = Type.INT; :}
        | REF
            {: RESULT = Type.REF; :}
        | Q
            {: RESULT = Type.Q; :}
        ;


formalDeclList ::= neFormalDeclList:list
                        {: RESULT=list; :}
                    |
                        {: RESULT = null; :}
                    ;
neFormalDeclList ::= varDecl:first COMMA neFormalDeclList:rest
                        {: RESULT = new FormalDeclList(first, rest, loc(firstleft,firstright)); :}
                   | varDecl:first
                        {: RESULT = new FormalDeclList(first,null, loc(firstleft,firstright)); :}
                   ;

stmtList ::= stmt:first stmtList:rest
            {: RESULT = new StmtList(first, rest, loc(firstleft, firstright)); :}
          |
            {: RESULT = null; :}
          ;


stmt ::= varDecl:var ASSIGN expr :e SEMICOLON
            {:  RESULT = new DeclStmt(var, e, loc(varleft, varright)); :}
      | IDENT:var ASSIGN expr :e SEMICOLON
                  {:  RESULT = new AssignStmt(var, e, loc(varleft, varright)); :}
      |  IF LPAREN cond:c RPAREN stmt:s
            {:  RESULT = new IfStmt(c, s, null, loc(cleft, cright)); :}
      |  IF LPAREN cond:c RPAREN stmt:thenBody ELSE stmt:elseBody
            {:  RESULT = new IfStmt(c, thenBody, elseBody, loc(cleft, cright)); :}
      |  WHILE LPAREN cond:c RPAREN stmt:s
            {:  RESULT = new WhileStmt(c, s, loc(cleft, cright)); :}
      | IDENT: funcName LPAREN exprList:args RPAREN SEMICOLON
            {: RESULT = new CallStmt(funcName, args, loc(funcNameleft, funcNameright)); :}
      | PRINT expr:e SEMICOLON
            {:  RESULT = new PrintStmt(e, loc(eleft, eright)); :}
      | RETURN expr:e SEMICOLON
            {:  RESULT = new ReturnStmt(e, loc(eleft, eright)); :}
      | LCURLY stmtList:body RCURLY
            {:  RESULT = new CompoundStmt(body, loc(bodyleft, bodyright)); :}
      ;

exprList ::= neExprList:list
                {: RESULT=list; :}
              |
                {: RESULT = null; :}
              ;
neExprList ::= expr:first COMMA neExprList:rest
                        {: RESULT = new ExprList(first, rest, loc(firstleft,firstright)); :}
                   | expr:first
                        {: RESULT = new ExprList(first,null, loc(firstleft,firstright)); :}
                   ;
expr ::= NIL:n
         {: RESULT = new NilExpr(loc(nleft, nright)); :}
      |INTCONST:c
         {: RESULT = new ConstExpr(c, loc(cleft, cright)); :}
      | IDENT: var
         {: RESULT = new IdentExpr(var, loc(varleft, varright)); :}
      | MINUS expr:e
         {: RESULT = new UnaryMinusExpr(e, loc(eleft, eright)); :}
         %prec UMINUS
      | LPAREN type:t RPAREN expr:e
        {: RESULT = new CastExpr(t,e, loc(tleft, tright)); :}
         %prec UMINUS
      | IDENT:funcName LPAREN exprList:params RPAREN
         {: RESULT = new CallExpr(funcName, params, loc(funcNameleft, funcNameright)); :}
      |  binaryExpr:e
         {: RESULT = e; :}
      |  LPAREN expr:e RPAREN
         {: RESULT = e; :}
      ;

binaryExpr ::= expr:e1 PLUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); :}
            |  expr:e1 MINUS expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); :}
           |  expr:e1 TIMES expr:e2
               {: RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); :}
           |  expr:e1 DOT expr:e2
                {: RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); :}
            ;

cond ::= expr:e1 LE expr:e2
                {:  RESULT = new CompCond(e1, CompCond.LE, e2, loc(e1left, e1right)); :}
            | expr:e1 GE expr:e2
                {:  RESULT = new CompCond(e1, CompCond.GE, e2, loc(e1left, e1right)); :}
            | expr:e1 LT expr:e2
                {:  RESULT = new CompCond(e1, CompCond.LT, e2, loc(e1left, e1right)); :}
            | expr:e1 GT expr:e2
                {:  RESULT = new CompCond(e1, CompCond.GT, e2, loc(e1left, e1right)); :}
            | expr:e1 EQ expr:e2
                {:  RESULT = new CompCond(e1, CompCond.EQ, e2, loc(e1left, e1right)); :}
            | expr:e1 NE expr:e2
                {:  RESULT = new CompCond(e1, CompCond.NE, e2, loc(e1left, e1right)); :}
            | cond:e1 AND cond:e2
                {:  RESULT = new LogicalCond(e1, LogicalCond.AND, e2, loc(e1left, e1right)); :}
            | cond:e1 OR cond:e2
                {:  RESULT = new LogicalCond(e1, LogicalCond.OR, e2, loc(e1left, e1right)); :}
            | NOT cond:e
                {:  RESULT = new LogicalCond(e, LogicalCond.NOT, null, loc(eleft, eright)); :}
            | LPAREN cond:e RPAREN
                {:  RESULT = e; :}
            ;